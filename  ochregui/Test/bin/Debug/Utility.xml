<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Utility</name>
    </assembly>
    <members>
        <member name="T:OchreGui.Utility.Rand">
            <summary>
            Utility (static) class with random number helper functions
            </summary>
        </member>
        <member name="M:OchreGui.Utility.Rand.Int32">
            <summary>
            Returns 0 or 1
            </summary>
            <returns></returns>
        </member>
        <member name="M:OchreGui.Utility.Rand.Int32(System.Int32,System.Int32)">
            <summary>
            Returns a random value from minimum to maximum, inclusive
            </summary>
            <param name="minimum"></param>
            <param name="maximum"></param>
            <returns></returns>
        </member>
        <member name="M:OchreGui.Utility.Rand.Int32(OchreGui.Utility.Dice)">
            <summary>
            Returns a randomly generated integer based on the specified Dice object.
            </summary>
            <param name="dice"></param>
            <returns></returns>
        </member>
        <member name="M:OchreGui.Utility.Rand.Boolean">
            <summary>
            Has an equal chance of return true or false.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OchreGui.Utility.Rand.Float">
            <summary>
            Random float between 0.0 and 1.0
            </summary>
            <returns></returns>
        </member>
        <member name="T:OchreGui.Utility.Rect">
            <summary>
            Immuatable data type representing a rectangle.
            <remarks>that the terms Upper, Left, Right, Bottom and Top are meaningful only when
            Size.Width and Size.Height are both positive</remarks>
            </summary>
        </member>
        <member name="M:OchreGui.Utility.Rect.Inflate(OchreGui.Utility.Rect,System.Int32,System.Int32)">
            <summary>
            Adds dx to left and right, and dy to top and bottom
            New width += dx*2, new height = dy*2
            </summary>
            <param name="source"></param>
            <param name="dx"></param>
            <param name="dy"></param>
            <returns></returns>
        </member>
        <member name="T:OchreGui.Utility.Dice">
            <summary>
            An immutable type representing a set of rpg dice along with a modifier.  Use this with
            Rand.Int32(Dice) to produce randomly generated numbers.
            </summary>
        </member>
        <member name="M:OchreGui.Utility.Dice.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct a Dice instanced given the number of dice and number of sides for each die.
            </summary>
            <example>
            To create a Dice object representing two six-sided dice:
            <code>
            Dice d = new Dice(2,6);
            </code>
            </example>
            <param name="numberOfDice"></param>
            <param name="numberOfSides"></param>
        </member>
        <member name="M:OchreGui.Utility.Dice.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a Dice instance given the number of dice, number sides per die, and a
            positive or negative modifier.
            </summary>
            <example>To construct a Dice object representing one six-sided die that gets a +2 modifier
            (which would return a random range of 3 thru 8):
            <code>Dice d = new Dice(1,6,2);</code></example>
            <param name="numberOfDice"></param>
            <param name="numberOfSides"></param>
            <param name="Modifier"></param>
        </member>
        <member name="M:OchreGui.Utility.Dice.#ctor(System.String)">
            <summary>
            Coonstructs a Dice object from a string that follows common RPG conventions 
            when specifying dice.
            </summary>
            <example>To create a dice object representing two six sided dice with a -2 modifier:
            <code>Dice d = new Dice("2d6-2");</code></example>
            <param name="formatString">
            In the form of {n}["d"|"D"][s]{"+"|"-"m}, where n=number of dice (optional), s = number of sides,
            and m=modifier (optional)
            </param>
        </member>
        <member name="P:OchreGui.Utility.Dice.NumberOfDice">
            <summary>
            The number of dice this Dice object represents
            </summary>
        </member>
        <member name="P:OchreGui.Utility.Dice.NumberOfSides">
            <summary>
            The number of sides per each die.
            </summary>
        </member>
        <member name="P:OchreGui.Utility.Dice.Modifier">
            <summary>
            The linear modifier of the random range obtained with this Dice object.
            </summary>
        </member>
        <member name="T:OchreGui.Utility.Size">
            <summary>
            Immutable type representing anything that has a width and a height
            </summary>
        </member>
        <member name="T:OchreGui.Utility.Point">
            <summary>
            Immutable pair of int values, representing an x,y coordinate.
            </summary>
        </member>
        <member name="M:OchreGui.Utility.Point.Shift(System.Int32,System.Int32)">
            <summary>
            Returns a new Point instance by adding dx to this.X and dy to this.Y.  This method
            does not modify this Point instance.
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
            <returns></returns>
        </member>
        <member name="M:OchreGui.Utility.MyExtensions.IsSet(System.Enum,System.Enum)">
            <summary>
            This will be deprecated by .NET 4.0 HasFlag() method.
            </summary>
            <param name="e"></param>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="T:OchreGui.Utility.StaticDictionary`2">
            <summary>
            Represents a type of Dictionary that, after construction, has a static number of
            items.  Items cannot be added or removed, but they can be modified as normal.
            To maintain the static nature, this class does not support a collection initializer; instead,
            it is constructed using an array of key value pairs.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:OchreGui.Utility.StaticDictionary`2.#ctor(System.Collections.Generic.KeyValuePair{`0,`1}[])">
            <summary>
            Construct a StaticDictionary instance given an array of key value pairs.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:OchreGui.Utility.StaticDictionary`2.ContainsKey(`0)">
            <summary>
            Returns true if this StaticDictionary contains the specified key.
            </summary>
            <param name="key"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="key"/>
            is null.</exception>
        </member>
        <member name="M:OchreGui.Utility.StaticDictionary`2.ContainsValue(`1)">
            <summary>
            Returns true if this StaticDictionary contains the specified value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:OchreGui.Utility.StaticDictionary`2.ToString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OchreGui.Utility.StaticDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OchreGui.Utility.StaticDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this collection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OchreGui.Utility.StaticDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value with the specified key.  The key must be non-null, and must
            exist in this StaticDictionary or an exception will be thrown.
            </summary>
            <param name="key"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="key"/>
            is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="key"/>
            does not exist in the default items.</exception>
        </member>
        <member name="P:OchreGui.Utility.StaticDictionary`2.Count">
            <summary>
            Gets the number of items contained in this StaticDictionary
            </summary>
        </member>
        <member name="P:OchreGui.Utility.StaticDictionary`2.Keys">
            <summary>
            Gets a collection containing the keys.
            </summary>
        </member>
        <member name="P:OchreGui.Utility.StaticDictionary`2.Values">
            <summary>
            Gets a collection containing the values.
            </summary>
        </member>
        <member name="T:OchreGui.Utility.AlternativeMap`2">
            <summary>
            Represents a collection of default items that can be selectively overriden with
            alternatives.  When retrieving a value, the alternative is returned if one exists; otherwise
            the default is returned.
            Conceptually, an AlternativeMap is similar to a Dictionary, albeit with a much simpler interface.
            A collection initializer can be used during construction, which adds alternatives.
            All AlternativeMap objects must have a valid collection of defaults, defined as a StaticDictionary object.
            The AlternateMap object stores a reference to this StaticDictionary, so that changes to the default items
            elsewhere will affect the retrieval of items in this class.  It is for this reason that the defaults
            must be defined as a StaticDictionary, so that additions/removals to the default collection 
            outside of this object do not introduce instability.
            All alternative items that are added must share a common key with one of the defaults, or an exception will
            be thrown.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:OchreGui.Utility.AlternativeMap`2.#ctor(OchreGui.Utility.StaticDictionary{`0,`1})">
            <summary>
            Construct an AlternativeMap instance with the specified default items.  This class
            supports a collection initializer to add alternative items during construction.
            </summary>
            <param name="def">A valid, non-null StaticMap collection holding the default items</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="defaults"/>
            is null</exception>
        </member>
        <member name="M:OchreGui.Utility.AlternativeMap`2.Add(`0,`1)">
            <summary>
            Adds the specified key and value to the alternatives.  The key must be defined
            in the StaticMap defaults passed during the constructor or an exception will
            be thrown.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="key"/>
            is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="key"/>
            does not exist in the default items.</exception>
        </member>
        <member name="M:OchreGui.Utility.AlternativeMap`2.RemoveAlternative(`0)">
            <summary>
            Removes the specified alternative so that the default will be retrieved.  If the
            alternative with the key exists, then this method returns true.  Otherwise this
            method returns false.
            </summary>
            <param name="key"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="key"/>
            is null.</exception>
        </member>
        <member name="M:OchreGui.Utility.AlternativeMap`2.RemoveAllAlternatives">
            <summary>
            Removes all of the alternatives, exposing the defaults for retrieval.
            </summary>
        </member>
        <member name="M:OchreGui.Utility.AlternativeMap`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OchreGui.Utility.AlternativeMap`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this collection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OchreGui.Utility.AlternativeMap`2.Item(`0)">
            <summary>
            Gets or sets the item with the specified key.  If retrieving a value, the alternative
            item will be returned if one exists, otherwise the default will be returned.  If setting
            a value, the alternative item is changed if the key exists; otherwise the alternative 
            item is added.
            </summary>
            <param name="key"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="key"/>
            is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="key"/>
            does not exist in the default items.</exception>
        </member>
    </members>
</doc>
